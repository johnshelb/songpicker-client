{"ast":null,"code":"var _jsxFileName = \"/Users/johnshelby/Desktop/aaa_coding/songpicker_mern/songpicker/src/components/CurrentSong.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function CurrentSong(_ref) {\n  _s();\n\n  let {\n    allSongs\n  } = _ref;\n  const [title, newTitle] = useState('Let me see...');\n\n  async function chooseSong() {\n    const eligibleSongs = allSongs.filter(song => song.count < 4);\n\n    if (eligibleSongs.length > 0) {\n      let index = Math.floor(Math.random() * eligibleSongs.length);\n      let ti = eligibleSongs[index].name;\n      eligibleSongs[index].count += 1;\n      fetch(`http://localhost:5000/update/${eligibleSongs[index]._id}`, {\n        method: 'POST',\n        body: JSON.stringify(eligibleSongs[index]),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }).then(newTitle(ti));\n      return;\n    } else {\n      for (let song in allSongs) {\n        allSongs[song].count = 0;\n        await fetch(`http://localhost:5000/update/${allSongs[song]._id}`, {\n          method: 'POST',\n          body: JSON.stringify(allSongs[song]),\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n      }\n\n      newTitle('resetting...');\n      chooseSong();\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"next\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"getSong\",\n        onClick: chooseSong,\n        children: \"What Song to Play Next?\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n\n_s(CurrentSong, \"fkWVIRYkzSKDjxvWC1oYOHX5NIc=\");\n\n_c = CurrentSong;\n\nvar _c;\n\n$RefreshReg$(_c, \"CurrentSong\");","map":{"version":3,"names":["React","useState","CurrentSong","allSongs","title","newTitle","chooseSong","eligibleSongs","filter","song","count","length","index","Math","floor","random","ti","name","fetch","_id","method","body","JSON","stringify","headers","then"],"sources":["/Users/johnshelby/Desktop/aaa_coding/songpicker_mern/songpicker/src/components/CurrentSong.js"],"sourcesContent":["import React, { useState } from 'react';\nexport default function CurrentSong({allSongs}){\n  const [title,newTitle] = useState('Let me see...')\n\n  async function chooseSong(){\n    const eligibleSongs = allSongs.filter(song=>song.count < 4)\n\n    if(eligibleSongs.length > 0){\n      let index = Math.floor(Math.random() * eligibleSongs.length)\n      let ti = eligibleSongs[index].name\n      eligibleSongs[index].count+=1;\n      fetch(`http://localhost:5000/update/${eligibleSongs[index]._id}`,{\n        method:'POST',\n        body:JSON.stringify(eligibleSongs[index]),\n        headers: {\n          'Content-Type': 'application/json'\n        },\n      })\n      .then(newTitle(ti))\n      return;\n    }else{\n      for(let song in allSongs){\n        allSongs[song].count=0\n        await fetch(`http://localhost:5000/update/${allSongs[song]._id}`,{\n          method:'POST',\n          body:JSON.stringify(allSongs[song]),\n          headers: {\n            'Content-Type': 'application/json'\n          },\n        })\n      }\n      newTitle('resetting...')\n      chooseSong()\n    }\n  }\n  return(\n    <>\n      <div className = 'next'>\n        <button id='getSong' onClick = { chooseSong }>What Song to Play Next?</button>\n        <h1>{title}</h1>\n      </div>\n    </>\n\n  )\n}\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;;AACA,eAAe,SAASC,WAAT,OAAgC;EAAA;;EAAA,IAAX;IAACC;EAAD,CAAW;EAC7C,MAAM,CAACC,KAAD,EAAOC,QAAP,IAAmBJ,QAAQ,CAAC,eAAD,CAAjC;;EAEA,eAAeK,UAAf,GAA2B;IACzB,MAAMC,aAAa,GAAGJ,QAAQ,CAACK,MAAT,CAAgBC,IAAI,IAAEA,IAAI,CAACC,KAAL,GAAa,CAAnC,CAAtB;;IAEA,IAAGH,aAAa,CAACI,MAAd,GAAuB,CAA1B,EAA4B;MAC1B,IAAIC,KAAK,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBR,aAAa,CAACI,MAAzC,CAAZ;MACA,IAAIK,EAAE,GAAGT,aAAa,CAACK,KAAD,CAAb,CAAqBK,IAA9B;MACAV,aAAa,CAACK,KAAD,CAAb,CAAqBF,KAArB,IAA4B,CAA5B;MACAQ,KAAK,CAAE,gCAA+BX,aAAa,CAACK,KAAD,CAAb,CAAqBO,GAAI,EAA1D,EAA4D;QAC/DC,MAAM,EAAC,MADwD;QAE/DC,IAAI,EAACC,IAAI,CAACC,SAAL,CAAehB,aAAa,CAACK,KAAD,CAA5B,CAF0D;QAG/DY,OAAO,EAAE;UACP,gBAAgB;QADT;MAHsD,CAA5D,CAAL,CAOCC,IAPD,CAOMpB,QAAQ,CAACW,EAAD,CAPd;MAQA;IACD,CAbD,MAaK;MACH,KAAI,IAAIP,IAAR,IAAgBN,QAAhB,EAAyB;QACvBA,QAAQ,CAACM,IAAD,CAAR,CAAeC,KAAf,GAAqB,CAArB;QACA,MAAMQ,KAAK,CAAE,gCAA+Bf,QAAQ,CAACM,IAAD,CAAR,CAAeU,GAAI,EAApD,EAAsD;UAC/DC,MAAM,EAAC,MADwD;UAE/DC,IAAI,EAACC,IAAI,CAACC,SAAL,CAAepB,QAAQ,CAACM,IAAD,CAAvB,CAF0D;UAG/De,OAAO,EAAE;YACP,gBAAgB;UADT;QAHsD,CAAtD,CAAX;MAOD;;MACDnB,QAAQ,CAAC,cAAD,CAAR;MACAC,UAAU;IACX;EACF;;EACD,oBACE;IAAA,uBACE;MAAK,SAAS,EAAG,MAAjB;MAAA,wBACE;QAAQ,EAAE,EAAC,SAAX;QAAqB,OAAO,EAAKA,UAAjC;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QADF,eAEE;QAAA,UAAKF;MAAL;QAAA;QAAA;QAAA;MAAA,QAFF;IAAA;MAAA;MAAA;MAAA;IAAA;EADF,iBADF;AASD;;GA3CuBF,W;;KAAAA,W"},"metadata":{},"sourceType":"module"}