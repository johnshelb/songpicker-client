{"ast":null,"code":"var _jsxFileName = \"/Users/johnshelby/Desktop/aaa coding/songpicker_mern/songpicker/src/components/CurrentSong.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function CurrentSong() {\n  _s();\n\n  const [title, newTitle] = useState('Let me see...');\n  const [records, setRecords] = useState();\n\n  function getSong() {\n    //  let songList = {'a':1,'b':1,'c':1,'d':1}//hitDatabase.grabData().ParseAsObject()//?????????????????????????\n    // async function getRecords() {\n    fetch(`http://localhost:5000/record/`) // if (!response.ok) {\n    //   const message = `An error occurred: ${response.statusText}`;\n    //   window.alert(message);\n    //   return;\n    // }\n    .then(res => res.json()).then(records => setRecords(records)); // }\n\n    const songs = Object.keys(songList); //continue the process as long as there is at least 1 song with fewer than 4 plays\n\n    while (Math.min(...Object.values(songList)) < 4) {\n      let index = Math.floor(Math.random() * songs.length);\n      let ti = songs[index];\n\n      if (songList[ti] < 4) {\n        songList[ti] += 1; //  updateDataBase(title or songList?)//?????????????????????\n\n        newTitle(ti);\n        return;\n      } else {\n        for (let song in songList) {\n          songList[song] = 0;\n        } //  updateDataBase(title or songList?)//?????????????????????\n\n\n        getSong();\n      }\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"next\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      id: \"getSong\",\n      onClick: getSong,\n      children: \"What Song to Play Next?\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CurrentSong, \"Odd1Nv9gQTrLe6KpeX4DxKFXIJM=\");\n\n_c = CurrentSong;\n\nvar _c;\n\n$RefreshReg$(_c, \"CurrentSong\");","map":{"version":3,"names":["React","useState","CurrentSong","title","newTitle","records","setRecords","getSong","fetch","then","res","json","songs","Object","keys","songList","Math","min","values","index","floor","random","length","ti","song"],"sources":["/Users/johnshelby/Desktop/aaa coding/songpicker_mern/songpicker/src/components/CurrentSong.js"],"sourcesContent":["import React, { useState } from 'react';\n\nexport default function CurrentSong(){\n  const [title,newTitle] = useState('Let me see...')\n  const [records,setRecords] = useState()\n  function getSong(){\n  //  let songList = {'a':1,'b':1,'c':1,'d':1}//hitDatabase.grabData().ParseAsObject()//?????????????????????????\n\n\n    // async function getRecords() {\n    fetch(`http://localhost:5000/record/`)\n\n\n      // if (!response.ok) {\n      //   const message = `An error occurred: ${response.statusText}`;\n      //   window.alert(message);\n      //   return;\n      // }\n\n      .then( res =>  res.json())\n      .then(records=>setRecords(records));\n    // }\n\n\n\n\n    const songs = Object.keys(songList);\n  //continue the process as long as there is at least 1 song with fewer than 4 plays\n    while(Math.min(...Object.values(songList))<4){\n      let index = Math.floor(Math.random() * songs.length)\n      let ti = songs[index]\n      if(songList[ti] < 4){\n        songList[ti]+=1;\n\n    //  updateDataBase(title or songList?)//?????????????????????\n        newTitle(ti)\n        return;\n      }else{\n        for(let song in songList){\n          songList[song]=0\n        }\n  //  updateDataBase(title or songList?)//?????????????????????\n        getSong()\n      }\n    }\n  }\n  return(\n    <div className = 'next'>\n      <button id='getSong' onClick={ getSong }>What Song to Play Next?</button>\n      <h1>{title}</h1>\n    </div>\n  )\n}\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;AAEA,eAAe,SAASC,WAAT,GAAsB;EAAA;;EACnC,MAAM,CAACC,KAAD,EAAOC,QAAP,IAAmBH,QAAQ,CAAC,eAAD,CAAjC;EACA,MAAM,CAACI,OAAD,EAASC,UAAT,IAAuBL,QAAQ,EAArC;;EACA,SAASM,OAAT,GAAkB;IAClB;IAGE;IACAC,KAAK,CAAE,+BAAF,CAAL,CAGE;IACA;IACA;IACA;IACA;IAPF,CASGC,IATH,CASSC,GAAG,IAAKA,GAAG,CAACC,IAAJ,EATjB,EAUGF,IAVH,CAUQJ,OAAO,IAAEC,UAAU,CAACD,OAAD,CAV3B,EALgB,CAgBhB;;IAKA,MAAMO,KAAK,GAAGC,MAAM,CAACC,IAAP,CAAYC,QAAZ,CAAd,CArBgB,CAsBlB;;IACE,OAAMC,IAAI,CAACC,GAAL,CAAS,GAAGJ,MAAM,CAACK,MAAP,CAAcH,QAAd,CAAZ,IAAqC,CAA3C,EAA6C;MAC3C,IAAII,KAAK,GAAGH,IAAI,CAACI,KAAL,CAAWJ,IAAI,CAACK,MAAL,KAAgBT,KAAK,CAACU,MAAjC,CAAZ;MACA,IAAIC,EAAE,GAAGX,KAAK,CAACO,KAAD,CAAd;;MACA,IAAGJ,QAAQ,CAACQ,EAAD,CAAR,GAAe,CAAlB,EAAoB;QAClBR,QAAQ,CAACQ,EAAD,CAAR,IAAc,CAAd,CADkB,CAGtB;;QACInB,QAAQ,CAACmB,EAAD,CAAR;QACA;MACD,CAND,MAMK;QACH,KAAI,IAAIC,IAAR,IAAgBT,QAAhB,EAAyB;UACvBA,QAAQ,CAACS,IAAD,CAAR,GAAe,CAAf;QACD,CAHE,CAIT;;;QACMjB,OAAO;MACR;IACF;EACF;;EACD,oBACE;IAAK,SAAS,EAAG,MAAjB;IAAA,wBACE;MAAQ,EAAE,EAAC,SAAX;MAAqB,OAAO,EAAGA,OAA/B;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QADF,eAEE;MAAA,UAAKJ;IAAL;MAAA;MAAA;MAAA;IAAA,QAFF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAMD;;GAlDuBD,W;;KAAAA,W"},"metadata":{},"sourceType":"module"}