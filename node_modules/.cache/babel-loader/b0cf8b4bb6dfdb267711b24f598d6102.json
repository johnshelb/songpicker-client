{"ast":null,"code":"var _jsxFileName = \"/Users/johnshelby/Desktop/aaa coding/songpicker_mern/songpicker/src/components/CurrentSong.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function CurrentSong() {\n  _s();\n\n  const [title, newTitle] = useState('Let me see...');\n\n  async function getSong() {\n    const response = await fetch(`http://localhost:5000/record/`);\n\n    if (!response.ok) {\n      const message = `An error occurred: ${response.statusText}`;\n      window.alert(message);\n      return;\n    }\n\n    const songList = await response.json();\n    const songs = [];\n\n    for (let i = 0; i < songList.length; i++) {\n      songs.push(songList[i].name);\n    } //continue the process as long as there is at least 1 song with fewer than 4 plays\n\n\n    while (songList.some(song => song.count < 4)) {\n      let index = Math.floor(Math.random() * songs.length);\n      let ti = songs[index];\n\n      if (true) {\n        // songList[ti]+=1;\n        //  updateDataBase(title or songList?)//?????????????????????\n        newTitle(ti);\n        console.log('okay, I am returning');\n        break;\n        return;\n      } else {\n        for (let song in songList) {\n          songList[song] = 0;\n        } //  updateDataBase(title or songList?)//?????????????????????\n        // getSong()\n\n      }\n    }\n  }\n\n  getSong();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"next\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      id: \"getSong\",\n      onClick: getSong,\n      children: \"What Song to Play Next?\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CurrentSong, \"fkWVIRYkzSKDjxvWC1oYOHX5NIc=\");\n\n_c = CurrentSong;\n\nvar _c;\n\n$RefreshReg$(_c, \"CurrentSong\");","map":{"version":3,"names":["React","useState","CurrentSong","title","newTitle","getSong","response","fetch","ok","message","statusText","window","alert","songList","json","songs","i","length","push","name","some","song","count","index","Math","floor","random","ti","console","log"],"sources":["/Users/johnshelby/Desktop/aaa coding/songpicker_mern/songpicker/src/components/CurrentSong.js"],"sourcesContent":["import React, { useState } from 'react';\n\nexport default function CurrentSong(){\n  const [title,newTitle] = useState('Let me see...')\n  async function getSong(){\n    const response = await fetch(`http://localhost:5000/record/`)\n    if (!response.ok) {\n      const message = `An error occurred: ${response.statusText}`;\n      window.alert(message);\n      return;\n    }\n    const songList = await response.json()\n    const songs = []\n    for(let i = 0; i < songList.length; i++){\n      songs.push(songList[i].name)\n    }\n  //continue the process as long as there is at least 1 song with fewer than 4 plays\n    while(songList.some(song=>song.count<4)){\n      let index = Math.floor(Math.random() * songs.length)\n      let ti = songs[index]\n      if(true){\n        // songList[ti]+=1;\n\n    //  updateDataBase(title or songList?)//?????????????????????\n        newTitle(ti)\n        console.log('okay, I am returning')\n        break\n        return;\n      }else{\n        for(let song in songList){\n          songList[song]=0\n        }\n  //  updateDataBase(title or songList?)//?????????????????????\n        // getSong()\n      }\n    }\n  }\n  getSong()\n  return(\n    <div className = 'next'>\n      <button id='getSong' onClick={ getSong }>What Song to Play Next?</button>\n      <h1>{title}</h1>\n    </div>\n  )\n}\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;AAEA,eAAe,SAASC,WAAT,GAAsB;EAAA;;EACnC,MAAM,CAACC,KAAD,EAAOC,QAAP,IAAmBH,QAAQ,CAAC,eAAD,CAAjC;;EACA,eAAeI,OAAf,GAAwB;IACtB,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,+BAAF,CAA5B;;IACA,IAAI,CAACD,QAAQ,CAACE,EAAd,EAAkB;MAChB,MAAMC,OAAO,GAAI,sBAAqBH,QAAQ,CAACI,UAAW,EAA1D;MACAC,MAAM,CAACC,KAAP,CAAaH,OAAb;MACA;IACD;;IACD,MAAMI,QAAQ,GAAG,MAAMP,QAAQ,CAACQ,IAAT,EAAvB;IACA,MAAMC,KAAK,GAAG,EAAd;;IACA,KAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGH,QAAQ,CAACI,MAA5B,EAAoCD,CAAC,EAArC,EAAwC;MACtCD,KAAK,CAACG,IAAN,CAAWL,QAAQ,CAACG,CAAD,CAAR,CAAYG,IAAvB;IACD,CAXqB,CAYxB;;;IACE,OAAMN,QAAQ,CAACO,IAAT,CAAcC,IAAI,IAAEA,IAAI,CAACC,KAAL,GAAW,CAA/B,CAAN,EAAwC;MACtC,IAAIC,KAAK,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBX,KAAK,CAACE,MAAjC,CAAZ;MACA,IAAIU,EAAE,GAAGZ,KAAK,CAACQ,KAAD,CAAd;;MACA,IAAG,IAAH,EAAQ;QACN;QAEJ;QACInB,QAAQ,CAACuB,EAAD,CAAR;QACAC,OAAO,CAACC,GAAR,CAAY,sBAAZ;QACA;QACA;MACD,CARD,MAQK;QACH,KAAI,IAAIR,IAAR,IAAgBR,QAAhB,EAAyB;UACvBA,QAAQ,CAACQ,IAAD,CAAR,GAAe,CAAf;QACD,CAHE,CAIT;QACM;;MACD;IACF;EACF;;EACDhB,OAAO;EACP,oBACE;IAAK,SAAS,EAAG,MAAjB;IAAA,wBACE;MAAQ,EAAE,EAAC,SAAX;MAAqB,OAAO,EAAGA,OAA/B;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QADF,eAEE;MAAA,UAAKF;IAAL;MAAA;MAAA;MAAA;IAAA,QAFF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAMD;;GA1CuBD,W;;KAAAA,W"},"metadata":{},"sourceType":"module"}