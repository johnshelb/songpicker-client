{"ast":null,"code":"var _jsxFileName = \"/Users/johnshelby/Desktop/aaa coding/songpicker_mern/songpicker/src/components/CurrentSong.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react'; // export default function CurrentSong(){\n//   const [title,newTitle] = useState('Let me see...')\n//   const [songList,updateSongList] = useState([])\n//   const [fetchSong,updateFetchSong]=useState(0);\n//   function addToFetchSong(){\n//     console.log('upping fetchSong')\n//     updateFetchSong(p=> p+1)\n//     console.log(fetchSong)\n//   }\n// useEffect(()=>{\n//     console.log('using effect')\n//     fetch(`http://localhost:5000/record/`)\n//       .then(response=>{if (!response.ok) {\n//         const message = `An error occurred: ${response.statusText}`;\n//         window.alert(message);\n//         return;\n//     }else{\n//\n//       updateSongList(response.json())\n//     }\n//   })\n//   //continue the process as long as there is at least 1 song with fewer than 4 plays\n//     const eligibleSongs = songList.map(song=>{\n//         if(song.count<4){\n//           return song;\n//         }\n//       }).filter(el=>el!=undefined)\n//       console.log(eligibleSongs)\n//\n//     if(eligibleSongs.length > 0){\n//       let index = Math.floor(Math.random() * eligibleSongs.length)\n//       let ti = eligibleSongs[index].name\n//\n//     //  updateDataBase(title or songList?)//?????????????????????\n//         newTitle(ti)\n//         console.log('okay, I am returning')\n//         return;\n//       }else{\n//         for(let song in songList){\n//           song.count=0\n//         }\n//   //  updateDataBase(title or songList?)//?????????????????????\n//          // updateFetchSong(p=>p+1)\n//       }\n//\n//   },[fetchSong])\n//\n//   return(\n//     <div className = 'next'>\n//       <button id='getSong' onClick={ addToFetchSong }>What Song to Play Next?</button>\n//       <h1>{title}</h1>\n//     </div>\n//   )\n// }\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function CurrentSong() {\n  _s();\n\n  const [title, newTitle] = useState('Let me see...');\n  const [songList, updateSongList] = [];\n  useEffect(() => {\n    console.log('using effect');\n    fetch(`http://localhost:5000/record/`).then(response => // {\n    response.ok ? response.json() : window.alert(`An error occurred: ${response.statusText}`) // if (!response.ok) {\n    //   const message = `An error occurred: ${response.statusText}`;\n    //   window.alert(message);\n    //   return;\n    // }else{\n    //   response.json()\n    // }\n    ).then(result => console.log(result) // result =>updateSongList(result)\n    );\n    console.log('now ' + songList);\n  });\n  console.log('songlist is ' + songList); //continue the process as long as there is at least 1 song with fewer than 4 plays\n  //   const eligibleSongs = songList.map(song=>{\n  //       if(song.count<4){\n  //         return song;\n  //       }\n  //     }).filter(el=>el!=undefined)\n  //     console.log(eligibleSongs)\n  //\n  //   if(eligibleSongs.length > 0){\n  //     let index = Math.floor(Math.random() * eligibleSongs.length)\n  //     let ti = eligibleSongs[index].name\n  //\n  //   //  updateDataBase(title or songList?)//?????????????????????\n  //       newTitle(ti)\n  //       console.log('okay, I am returning')\n  //       return;\n  //     }else{\n  //       for(let song in songList){\n  //         song.count=0\n  //       }\n  // //  updateDataBase(title or songList?)//?????????????????????\n  //        // updateFetchSong(p=>p+1)\n  //     }\n  //\n  // },[fetchSong])\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"next\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      id: \"getSong\",\n      children: \"What Song to Play Next?\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CurrentSong, \"miH8Yj6Rkx3e/IWgkGalYxYoSaU=\");\n\n_c = CurrentSong;\n\nvar _c;\n\n$RefreshReg$(_c, \"CurrentSong\");","map":{"version":3,"names":["React","useState","useEffect","CurrentSong","title","newTitle","songList","updateSongList","console","log","fetch","then","response","ok","json","window","alert","statusText","result"],"sources":["/Users/johnshelby/Desktop/aaa coding/songpicker_mern/songpicker/src/components/CurrentSong.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\n// export default function CurrentSong(){\n//   const [title,newTitle] = useState('Let me see...')\n//   const [songList,updateSongList] = useState([])\n//   const [fetchSong,updateFetchSong]=useState(0);\n//   function addToFetchSong(){\n//     console.log('upping fetchSong')\n//     updateFetchSong(p=> p+1)\n//     console.log(fetchSong)\n//   }\n// useEffect(()=>{\n//     console.log('using effect')\n//     fetch(`http://localhost:5000/record/`)\n//       .then(response=>{if (!response.ok) {\n//         const message = `An error occurred: ${response.statusText}`;\n//         window.alert(message);\n//         return;\n//     }else{\n//\n//       updateSongList(response.json())\n//     }\n//   })\n//   //continue the process as long as there is at least 1 song with fewer than 4 plays\n//     const eligibleSongs = songList.map(song=>{\n//         if(song.count<4){\n//           return song;\n//         }\n//       }).filter(el=>el!=undefined)\n//       console.log(eligibleSongs)\n//\n//     if(eligibleSongs.length > 0){\n//       let index = Math.floor(Math.random() * eligibleSongs.length)\n//       let ti = eligibleSongs[index].name\n//\n//     //  updateDataBase(title or songList?)//?????????????????????\n//         newTitle(ti)\n//         console.log('okay, I am returning')\n//         return;\n//       }else{\n//         for(let song in songList){\n//           song.count=0\n//         }\n//   //  updateDataBase(title or songList?)//?????????????????????\n//          // updateFetchSong(p=>p+1)\n//       }\n//\n//   },[fetchSong])\n//\n//   return(\n//     <div className = 'next'>\n//       <button id='getSong' onClick={ addToFetchSong }>What Song to Play Next?</button>\n//       <h1>{title}</h1>\n//     </div>\n//   )\n// }\n\nexport default function CurrentSong(){\n  const [title,newTitle] = useState('Let me see...')\n  const [songList,updateSongList] = ([])\n\nuseEffect(()=>{\n    console.log('using effect')\n    fetch(`http://localhost:5000/record/`)\n      .then(response=>\n        // {\n          response.ok?response.json():window.alert(`An error occurred: ${response.statusText}`)\n          // if (!response.ok) {\n          //   const message = `An error occurred: ${response.statusText}`;\n          //   window.alert(message);\n          //   return;\n          // }else{\n          //   response.json()\n          // }\n        )\n      .then(\n             result=>console.log(result)\n              // result =>updateSongList(result)\n            )\n            console.log('now ' + songList)\n          }\n\n  )\n  console.log('songlist is ' + songList)\n\n  //continue the process as long as there is at least 1 song with fewer than 4 plays\n  //   const eligibleSongs = songList.map(song=>{\n  //       if(song.count<4){\n  //         return song;\n  //       }\n  //     }).filter(el=>el!=undefined)\n  //     console.log(eligibleSongs)\n  //\n  //   if(eligibleSongs.length > 0){\n  //     let index = Math.floor(Math.random() * eligibleSongs.length)\n  //     let ti = eligibleSongs[index].name\n  //\n  //   //  updateDataBase(title or songList?)//?????????????????????\n  //       newTitle(ti)\n  //       console.log('okay, I am returning')\n  //       return;\n  //     }else{\n  //       for(let song in songList){\n  //         song.count=0\n  //       }\n  // //  updateDataBase(title or songList?)//?????????????????????\n  //        // updateFetchSong(p=>p+1)\n  //     }\n  //\n  // },[fetchSong])\n\n  return(\n    <div className = 'next'>\n      <button id='getSong' >What Song to Play Next?</button>\n      <h1>{title}</h1>\n    </div>\n  )\n}\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,eAAe,SAASC,WAAT,GAAsB;EAAA;;EACnC,MAAM,CAACC,KAAD,EAAOC,QAAP,IAAmBJ,QAAQ,CAAC,eAAD,CAAjC;EACA,MAAM,CAACK,QAAD,EAAUC,cAAV,IAA6B,EAAnC;EAEFL,SAAS,CAAC,MAAI;IACVM,OAAO,CAACC,GAAR,CAAY,cAAZ;IACAC,KAAK,CAAE,+BAAF,CAAL,CACGC,IADH,CACQC,QAAQ,IACZ;IACEA,QAAQ,CAACC,EAAT,GAAYD,QAAQ,CAACE,IAAT,EAAZ,GAA4BC,MAAM,CAACC,KAAP,CAAc,sBAAqBJ,QAAQ,CAACK,UAAW,EAAvD,CAHlC,CAIM;IACA;IACA;IACA;IACA;IACA;IACA;IAVN,EAYGN,IAZH,CAaSO,MAAM,IAAEV,OAAO,CAACC,GAAR,CAAYS,MAAZ,CAbjB,CAcU;IAdV;IAgBQV,OAAO,CAACC,GAAR,CAAY,SAASH,QAArB;EACD,CAnBF,CAAT;EAsBEE,OAAO,CAACC,GAAR,CAAY,iBAAiBH,QAA7B,EA1BmC,CA4BnC;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,oBACE;IAAK,SAAS,EAAG,MAAjB;IAAA,wBACE;MAAQ,EAAE,EAAC,SAAX;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QADF,eAEE;MAAA,UAAKF;IAAL;MAAA;MAAA;MAAA;IAAA,QAFF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAMD;;GA5DuBD,W;;KAAAA,W"},"metadata":{},"sourceType":"module"}