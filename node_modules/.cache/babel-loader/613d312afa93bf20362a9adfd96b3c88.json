{"ast":null,"code":"var _jsxFileName = \"/Users/johnshelby/Desktop/aaa coding/songpicker_mern/songpicker/src/components/CurrentSong.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function CurrentSong() {\n  _s();\n\n  const [title, newTitle] = useState('Let me see...');\n  const [songList, updateSongList] = useState([]);\n  useEffect(() => {\n    console.log('using effect');\n    fetch(`http://localhost:5000/record/`).then(response => response.ok ? response.json() : window.alert(`An error occurred: ${response.statusText}`)).then(result => updateSongList(result));\n  }, [title]);\n\n  function chooseSong() {\n    const eligibleSongs = songList.map(song => {\n      console.log(JSON.stringify(song) + song.count);\n\n      if (song.count < 4) {\n        return song;\n      }\n    }).filter(el => el != undefined);\n\n    if (eligibleSongs.length > 0) {\n      let index = Math.floor(Math.random() * eligibleSongs.length);\n      let ti = eligibleSongs[index].name;\n      eligibleSongs[index].count += 1;\n      console.log('heh');\n      console.log(JSON.stringify(eligibleSongs[index]));\n      console.log('heh');\n      fetch(`http://localhost:5000/update/${eligibleSongs[index]._id.toString()}`, {\n        method: 'POST',\n        body: JSON.stringify(eligibleSongs[index]),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      newTitle(ti); //  updateDataBase(title or songList?)//?????????????????????\n\n      return;\n    } else {\n      newTitle('resetting...');\n\n      for (let song in songList) {\n        songList[song].count = 0;\n        fetch(`http://localhost:5000/update/${songList.song.id.toString()}`, {\n          method: 'POST',\n          body: JSON.stringify(songList[song]),\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n      }\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"next\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      id: \"getSong\",\n      onClick: chooseSong,\n      children: \"What Song to Play Next?\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CurrentSong, \"EpB434AxDFJy7WKVGTEmN+iDq8w=\");\n\n_c = CurrentSong;\n\nvar _c;\n\n$RefreshReg$(_c, \"CurrentSong\");","map":{"version":3,"names":["React","useState","useEffect","CurrentSong","title","newTitle","songList","updateSongList","console","log","fetch","then","response","ok","json","window","alert","statusText","result","chooseSong","eligibleSongs","map","song","JSON","stringify","count","filter","el","undefined","length","index","Math","floor","random","ti","name","_id","toString","method","body","headers","id"],"sources":["/Users/johnshelby/Desktop/aaa coding/songpicker_mern/songpicker/src/components/CurrentSong.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nexport default function CurrentSong(){\n  const [title,newTitle] = useState('Let me see...')\n  const [songList,updateSongList] = useState([])\n\nuseEffect(()=>{\n    console.log('using effect')\n    fetch(`http://localhost:5000/record/`)\n      .then(response=>\n          response.ok?response.json():window.alert(`An error occurred: ${response.statusText}`)\n        )\n      .then(result =>updateSongList(result))\n    },[title]\n)\n\n  function chooseSong(){\n    const eligibleSongs = songList.map(song=>{\n      console.log(JSON.stringify(song) + song.count)\n        if(song.count<4){\n          return song;\n        }\n      }).filter(el=>el!=undefined)\n    if(eligibleSongs.length > 0){\n      let index = Math.floor(Math.random() * eligibleSongs.length)\n      let ti = eligibleSongs[index].name\n\n      eligibleSongs[index].count+=1;\n      console.log('heh')\n      console.log(JSON.stringify(eligibleSongs[index]))\n      console.log('heh')\n\n      fetch(`http://localhost:5000/update/${eligibleSongs[index]._id.toString()}`,{\n        method:'POST',\n        body:JSON.stringify(eligibleSongs[index]),\n        headers: {\n          'Content-Type': 'application/json'\n        },\n      })\n      newTitle(ti)\n    //  updateDataBase(title or songList?)//?????????????????????\n        return;\n      }\n      else{\n        newTitle('resetting...')\n        for(let song in songList){\n          songList[song].count=0\n          fetch(`http://localhost:5000/update/${songList.song.id.toString()}`,{\n            method:'POST',\n            body:JSON.stringify(songList[song]),\n            headers: {\n              'Content-Type': 'application/json'\n            },\n          })\n        }\n      }\n    }\n  return(\n    <div className = 'next'>\n      <button id='getSong' onClick = { chooseSong }>What Song to Play Next?</button>\n      <h1>{title}</h1>\n    </div>\n  )\n\n}\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;;AAEA,eAAe,SAASC,WAAT,GAAsB;EAAA;;EACnC,MAAM,CAACC,KAAD,EAAOC,QAAP,IAAmBJ,QAAQ,CAAC,eAAD,CAAjC;EACA,MAAM,CAACK,QAAD,EAAUC,cAAV,IAA4BN,QAAQ,CAAC,EAAD,CAA1C;EAEFC,SAAS,CAAC,MAAI;IACVM,OAAO,CAACC,GAAR,CAAY,cAAZ;IACAC,KAAK,CAAE,+BAAF,CAAL,CACGC,IADH,CACQC,QAAQ,IACVA,QAAQ,CAACC,EAAT,GAAYD,QAAQ,CAACE,IAAT,EAAZ,GAA4BC,MAAM,CAACC,KAAP,CAAc,sBAAqBJ,QAAQ,CAACK,UAAW,EAAvD,CAFlC,EAIGN,IAJH,CAIQO,MAAM,IAAGX,cAAc,CAACW,MAAD,CAJ/B;EAKC,CAPI,EAOH,CAACd,KAAD,CAPG,CAAT;;EAUE,SAASe,UAAT,GAAqB;IACnB,MAAMC,aAAa,GAAGd,QAAQ,CAACe,GAAT,CAAaC,IAAI,IAAE;MACvCd,OAAO,CAACC,GAAR,CAAYc,IAAI,CAACC,SAAL,CAAeF,IAAf,IAAuBA,IAAI,CAACG,KAAxC;;MACE,IAAGH,IAAI,CAACG,KAAL,GAAW,CAAd,EAAgB;QACd,OAAOH,IAAP;MACD;IACF,CALmB,EAKjBI,MALiB,CAKVC,EAAE,IAAEA,EAAE,IAAEC,SALE,CAAtB;;IAMA,IAAGR,aAAa,CAACS,MAAd,GAAuB,CAA1B,EAA4B;MAC1B,IAAIC,KAAK,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBb,aAAa,CAACS,MAAzC,CAAZ;MACA,IAAIK,EAAE,GAAGd,aAAa,CAACU,KAAD,CAAb,CAAqBK,IAA9B;MAEAf,aAAa,CAACU,KAAD,CAAb,CAAqBL,KAArB,IAA4B,CAA5B;MACAjB,OAAO,CAACC,GAAR,CAAY,KAAZ;MACAD,OAAO,CAACC,GAAR,CAAYc,IAAI,CAACC,SAAL,CAAeJ,aAAa,CAACU,KAAD,CAA5B,CAAZ;MACAtB,OAAO,CAACC,GAAR,CAAY,KAAZ;MAEAC,KAAK,CAAE,gCAA+BU,aAAa,CAACU,KAAD,CAAb,CAAqBM,GAArB,CAAyBC,QAAzB,EAAoC,EAArE,EAAuE;QAC1EC,MAAM,EAAC,MADmE;QAE1EC,IAAI,EAAChB,IAAI,CAACC,SAAL,CAAeJ,aAAa,CAACU,KAAD,CAA5B,CAFqE;QAG1EU,OAAO,EAAE;UACP,gBAAgB;QADT;MAHiE,CAAvE,CAAL;MAOAnC,QAAQ,CAAC6B,EAAD,CAAR,CAhB0B,CAiB5B;;MACI;IACD,CAnBH,MAoBM;MACF7B,QAAQ,CAAC,cAAD,CAAR;;MACA,KAAI,IAAIiB,IAAR,IAAgBhB,QAAhB,EAAyB;QACvBA,QAAQ,CAACgB,IAAD,CAAR,CAAeG,KAAf,GAAqB,CAArB;QACAf,KAAK,CAAE,gCAA+BJ,QAAQ,CAACgB,IAAT,CAAcmB,EAAd,CAAiBJ,QAAjB,EAA4B,EAA7D,EAA+D;UAClEC,MAAM,EAAC,MAD2D;UAElEC,IAAI,EAAChB,IAAI,CAACC,SAAL,CAAelB,QAAQ,CAACgB,IAAD,CAAvB,CAF6D;UAGlEkB,OAAO,EAAE;YACP,gBAAgB;UADT;QAHyD,CAA/D,CAAL;MAOD;IACF;EACF;;EACH,oBACE;IAAK,SAAS,EAAG,MAAjB;IAAA,wBACE;MAAQ,EAAE,EAAC,SAAX;MAAqB,OAAO,EAAKrB,UAAjC;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QADF,eAEE;MAAA,UAAKf;IAAL;MAAA;MAAA;MAAA;IAAA,QAFF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAOD;;GA9DuBD,W;;KAAAA,W"},"metadata":{},"sourceType":"module"}